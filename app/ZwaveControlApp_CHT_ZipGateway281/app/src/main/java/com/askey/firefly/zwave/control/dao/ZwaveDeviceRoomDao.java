package com.askey.firefly.zwave.control.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZWAVE_DEVICE_ROOM".
*/
public class ZwaveDeviceRoomDao extends AbstractDao<ZwaveDeviceRoom, Long> {

    public static final String TABLENAME = "ZWAVE_DEVICE_ROOM";

    /**
     * Properties of entity ZwaveDeviceRoom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RoomId = new Property(0, Long.class, "roomId", true, "_id");
        public final static Property RoomName = new Property(1, String.class, "roomName", false, "roomName");
        public final static Property Condition = new Property(2, String.class, "condition", false, "condition");
        public final static Property SensorNodeId = new Property(3, Integer.class, "sensorNodeId", false, "sensorNodeId");
    }

    private DaoSession daoSession;


    public ZwaveDeviceRoomDao(DaoConfig config) {
        super(config);
    }
    
    public ZwaveDeviceRoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZwaveDeviceRoom entity) {
        stmt.clearBindings();
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(1, roomId);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(2, roomName);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(3, condition);
        }
 
        Integer sensorNodeId = entity.getSensorNodeId();
        if (sensorNodeId != null) {
            stmt.bindLong(4, sensorNodeId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZwaveDeviceRoom entity) {
        stmt.clearBindings();
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(1, roomId);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(2, roomName);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(3, condition);
        }
 
        Integer sensorNodeId = entity.getSensorNodeId();
        if (sensorNodeId != null) {
            stmt.bindLong(4, sensorNodeId);
        }
    }

    @Override
    protected final void attachEntity(ZwaveDeviceRoom entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZwaveDeviceRoom readEntity(Cursor cursor, int offset) {
        ZwaveDeviceRoom entity = new ZwaveDeviceRoom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // roomId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // roomName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // condition
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // sensorNodeId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZwaveDeviceRoom entity, int offset) {
        entity.setRoomId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRoomName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCondition(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSensorNodeId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZwaveDeviceRoom entity, long rowId) {
        entity.setRoomId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZwaveDeviceRoom entity) {
        if(entity != null) {
            return entity.getRoomId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZwaveDeviceRoom entity) {
        return entity.getRoomId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
