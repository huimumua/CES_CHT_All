package com.askey.firefly.zwave.control.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZWAVE_DEVICE_GROUP".
*/
public class ZwaveDeviceGroupDao extends AbstractDao<ZwaveDeviceGroup, Long> {

    public static final String TABLENAME = "ZWAVE_DEVICE_GROUP";

    /**
     * Properties of entity ZwaveDeviceGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceGroupId = new Property(0, Long.class, "deviceGroupId", true, "_id");
        public final static Property NodeId = new Property(1, Integer.class, "nodeId", false, "nodeId");
        public final static Property GroupId = new Property(2, Integer.class, "groupId", false, "groupId");
        public final static Property InGroupNodeId = new Property(3, Integer.class, "inGroupNodeId", false, "inGroupNodeId");
        public final static Property InterfaceId = new Property(4, Integer.class, "interfaceId", false, "interfaceId");
        public final static Property EndpointId = new Property(5, Integer.class, "endpointId", false, "endpointId");
    }

    private DaoSession daoSession;


    public ZwaveDeviceGroupDao(DaoConfig config) {
        super(config);
    }
    
    public ZwaveDeviceGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZwaveDeviceGroup entity) {
        stmt.clearBindings();
 
        Long deviceGroupId = entity.getDeviceGroupId();
        if (deviceGroupId != null) {
            stmt.bindLong(1, deviceGroupId);
        }
 
        Integer nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindLong(2, nodeId);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(3, groupId);
        }
 
        Integer inGroupNodeId = entity.getInGroupNodeId();
        if (inGroupNodeId != null) {
            stmt.bindLong(4, inGroupNodeId);
        }
 
        Integer interfaceId = entity.getInterfaceId();
        if (interfaceId != null) {
            stmt.bindLong(5, interfaceId);
        }
 
        Integer endpointId = entity.getEndpointId();
        if (endpointId != null) {
            stmt.bindLong(6, endpointId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZwaveDeviceGroup entity) {
        stmt.clearBindings();
 
        Long deviceGroupId = entity.getDeviceGroupId();
        if (deviceGroupId != null) {
            stmt.bindLong(1, deviceGroupId);
        }
 
        Integer nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindLong(2, nodeId);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(3, groupId);
        }
 
        Integer inGroupNodeId = entity.getInGroupNodeId();
        if (inGroupNodeId != null) {
            stmt.bindLong(4, inGroupNodeId);
        }
 
        Integer interfaceId = entity.getInterfaceId();
        if (interfaceId != null) {
            stmt.bindLong(5, interfaceId);
        }
 
        Integer endpointId = entity.getEndpointId();
        if (endpointId != null) {
            stmt.bindLong(6, endpointId);
        }
    }

    @Override
    protected final void attachEntity(ZwaveDeviceGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZwaveDeviceGroup readEntity(Cursor cursor, int offset) {
        ZwaveDeviceGroup entity = new ZwaveDeviceGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // deviceGroupId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // nodeId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // inGroupNodeId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // interfaceId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // endpointId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZwaveDeviceGroup entity, int offset) {
        entity.setDeviceGroupId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNodeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setInGroupNodeId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setInterfaceId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setEndpointId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZwaveDeviceGroup entity, long rowId) {
        entity.setDeviceGroupId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZwaveDeviceGroup entity) {
        if(entity != null) {
            return entity.getDeviceGroupId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZwaveDeviceGroup entity) {
        return entity.getDeviceGroupId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
