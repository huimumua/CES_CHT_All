package com.askey.firefly.zwave.control.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZWAVE_DEVICE".
*/
public class ZwaveDeviceDao extends AbstractDao<ZwaveDevice, Long> {

    public static final String TABLENAME = "ZWAVE_DEVICE";

    /**
     * Properties of entity ZwaveDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ZwaveId = new Property(0, Long.class, "zwaveId", true, "_id");
        public final static Property HomeId = new Property(1, String.class, "homeId", false, "homeId");
        public final static Property NodeId = new Property(2, Integer.class, "nodeId", false, "nodeId");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
        public final static Property NodeInfo = new Property(4, String.class, "nodeInfo", false, "nodeInfo");
        public final static Property DevType = new Property(5, String.class, "devType", false, "devType");
        public final static Property Scene = new Property(6, String.class, "scene", false, "scene");
    }

    private Query<ZwaveDevice> zwaveDeviceScene_ZwaveDeviceListQuery;

    public ZwaveDeviceDao(DaoConfig config) {
        super(config);
    }
    
    public ZwaveDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZwaveDevice entity) {
        stmt.clearBindings();
 
        Long zwaveId = entity.getZwaveId();
        if (zwaveId != null) {
            stmt.bindLong(1, zwaveId);
        }
 
        String homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindString(2, homeId);
        }
 
        Integer nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindLong(3, nodeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String nodeInfo = entity.getNodeInfo();
        if (nodeInfo != null) {
            stmt.bindString(5, nodeInfo);
        }
 
        String devType = entity.getDevType();
        if (devType != null) {
            stmt.bindString(6, devType);
        }
 
        String scene = entity.getScene();
        if (scene != null) {
            stmt.bindString(7, scene);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZwaveDevice entity) {
        stmt.clearBindings();
 
        Long zwaveId = entity.getZwaveId();
        if (zwaveId != null) {
            stmt.bindLong(1, zwaveId);
        }
 
        String homeId = entity.getHomeId();
        if (homeId != null) {
            stmt.bindString(2, homeId);
        }
 
        Integer nodeId = entity.getNodeId();
        if (nodeId != null) {
            stmt.bindLong(3, nodeId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String nodeInfo = entity.getNodeInfo();
        if (nodeInfo != null) {
            stmt.bindString(5, nodeInfo);
        }
 
        String devType = entity.getDevType();
        if (devType != null) {
            stmt.bindString(6, devType);
        }
 
        String scene = entity.getScene();
        if (scene != null) {
            stmt.bindString(7, scene);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZwaveDevice readEntity(Cursor cursor, int offset) {
        ZwaveDevice entity = new ZwaveDevice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // zwaveId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // homeId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // nodeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nodeInfo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // devType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // scene
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZwaveDevice entity, int offset) {
        entity.setZwaveId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNodeId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNodeInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScene(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZwaveDevice entity, long rowId) {
        entity.setZwaveId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZwaveDevice entity) {
        if(entity != null) {
            return entity.getZwaveId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZwaveDevice entity) {
        return entity.getZwaveId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "zwaveDeviceList" to-many relationship of ZwaveDeviceScene. */
    public List<ZwaveDevice> _queryZwaveDeviceScene_ZwaveDeviceList(String scene) {
        synchronized (this) {
            if (zwaveDeviceScene_ZwaveDeviceListQuery == null) {
                QueryBuilder<ZwaveDevice> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Scene.eq(null));
                zwaveDeviceScene_ZwaveDeviceListQuery = queryBuilder.build();
            }
        }
        Query<ZwaveDevice> query = zwaveDeviceScene_ZwaveDeviceListQuery.forCurrentThread();
        query.setParameter(0, scene);
        return query.list();
    }

}
